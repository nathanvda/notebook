require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe NotesController do

  include Devise::TestHelpers

  before (:each) do
    @user = Factory.create(:user)
    @book = @user.books.first
    sign_in @user
  end

  def valid_attributes
    {}
  end

  # this function builds an id in the same way as
  def build_update_id(note)
    "note__content__#{note.id}"
  end

  #describe "GET show" do
  #  it "assigns the requested note as @note" do
  #    note = Note.create! valid_attributes
  #    get :show, :id => note.id.to_s
  #    assigns(:note).should eq(note)
  #  end
  #end
  #
  #describe "GET new" do
  #  it "assigns a new note as @note" do
  #    get :new
  #    assigns(:note).should be_a_new(Note)
  #  end
  #end
  #
  #describe "GET edit" do
  #  it "assigns the requested note as @note" do
  #    note = Note.create! valid_attributes
  #    get :edit, :id => note.id.to_s
  #    assigns(:note).should eq(note)
  #  end
  #end

  describe "POST create" do
    context "sending html" do
      before do
        @note = Factory(:note, :book => @book)
        post :create, :book_id => @book.id, :note => valid_attributes
      end
      it "is not acceptable" do
        response.status.should == 406
      end
    end

    context 'sending js' do
      describe "with valid params" do
        it "creates a new Note" do
          expect {
            post :create, :book_id => @book.id, :note => valid_attributes, :format => 'js'
          }.to change(Note, :count).by(1)
        end

        it "assigns a newly created note as @note" do
          post :create, :book_id => @book.id, :note => valid_attributes, :format => 'js'
          assigns(:note).should be_a(Note)
          assigns(:note).should be_persisted
        end

        it "redirects to the created note" do
          post :create, :book_id => @book.id, :note => valid_attributes, :format => 'js'
          should render_template :create
        end
      end

      describe "with invalid params" do
        context "book does not exist" do
          pending
        end
        context "book is not owned by the user" do
          pending
        end
        it "assigns a newly created but unsaved note as @note" do
          # Trigger the behavior that occurs when invalid params are submitted
          Note.any_instance.stub(:save).and_return(false)
          post :create, :book_id => @book.id, :note => {}
          assigns(:note).should be_a_new(Note)
        end

        #it "re-renders the 'new' template" do
        #  # Trigger the behavior that occurs when invalid params are submitted
        #  Note.any_instance.stub(:save).and_return(false)
        #  post :create, :book_id => @book.id, :note => {}
        #  response.should render_template("new")
        #end
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before do
        @note = Factory(:note, :book => @book, :content => 'old-content')
        put :update, :id => build_update_id(@note), :book_id => @book.id, :value => 'new-content', :format => 'js'
      end
      it "updates the requested note" do
        # Assuming there are no other notes in the database, this
        # specifies that the Note created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        @note.reload.content.should == 'new-content'
      end

      it "assigns the requested note as @note" do
        assigns(:note).should eq(@note)
      end

      it "renders the new content field" do
        response.body.should == '<pre>new-content</pre>'
      end
    end

    describe "with invalid params" do
      before(:each) do
        @note = Factory(:note, :book => @book )
        # Trigger the behavior that occurs when invalid params are submitted
        Note.any_instance.stub(:update_attributes).and_return(false)
        put :update, :id => build_update_id(@note)
      end
      it "assigns the note as @note" do
        assigns(:note).should eq(@note)
      end
      it "is unprocessable" do
        response.status.should == 422
      end
      it "renders the errors" do
        response.body.should == ''
      end
    end

    context "another users note" do
      before do
        @other_user = Factory(:user)
        @his_book = @other_user.books.first
        @his_note = Factory(:note, :book => @his_book)
      end
      it "does not destroy the requested note" do
        expect {
          put :update, :id => build_update_id(@his_note), :book_id => @book.id, :value => 'new-content', :format => 'js'
        }.to raise_error(ActiveRecord::RecordNotFound)
      end

    end
  end

  describe "DELETE destroy" do
    before do
      @note = Factory(:note, :book => @book)
    end
    context "sending html" do
      it "is unacceptable" do
        delete :destroy, :id => @note.id.to_s, :book_id => @book.id
        response.status.should == 406
      end
    end
    it "destroys the requested note" do
      expect {
        delete :destroy, :id => @note.id.to_s, :book_id => @book.id, :format => 'js'
      }.to change(Note, :count).by(-1)
    end

    it "redirects to the notes list" do
      delete :destroy, :id => @note.id.to_s, :book_id => @book.id, :format => 'js'
      response.should render_template :destroy
    end

    context "another users note" do
      before do
        @other_user = Factory(:user)
        @his_note = Factory(:note, :book => @other_user.books.first)
      end
      it "does not destroy the requested note" do
        expect {
          delete :destroy, :id => @his_note.id.to_s, :book_id => @book.id, :format => 'js'
        }.to raise_error(ActiveRecord::RecordNotFound)
      end

    end
  end

end
